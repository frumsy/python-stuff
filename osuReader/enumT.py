#This file is very similar to the ConvertHitObjectType.cs file in osu. Simply ported to python and changed a bit
from enum import IntFlag
import copy
import osuData
from hitObjects import Circle
from hitObjects import Slider
from hitObjects import Spinner
from osuTypes import CurveTypes
from osuTypes import HitObjectTypes

class SampleBankInfo():
	Normal = None#str
	Add = None#str
	Volume	= None#int
	
	def clone(self):
		return copy.copy(self)
	
def getCurveType(x):
	return {
		'C': CurveTypes.Catmull,
		'B': CurveTypes.Bezier,
		'L': CurveTypes.Linear,
		'P': CurveTypes.PerfectCurve
			}[x]
			
#soundType = int(split[4])
bankInfo = SampleBankInfo()
HOT = HitObjectTypes
	
def readCustomBanks(line, info):
	if(len(line) > 1):
		split = line.split(':')
		bank = int(split[0])
		addbank = int(split[1])
		stringBank = str(bank).lower()
		if (stringBank == "none"):
			stringBank = ''
		stringAddBank = str(addbank).lower()
		if(stringAddBank == "none"):
			stringAddBank = null
	
		bankInfo.Normal = stringBank
		bankInfo.Add = stringAddBank
		
		if(len(split) > 3):
			bankInfo.Volume = int(split[3])

def parse(line):
	split = line.split(',')
	if(len(split) > 4):
		#print("\n-=-=-=-: " + split[3])
		hitType = int(split[3]) & ~HOT.ColourHax;
		combo =  HOT.NewCombo in hitType
		hitType &= ~HOT.NewCombo
        
		soundType = int(split[4])
		#bankInfo = SampleBankInfo() moved up because it's used in readCustomBanks
		
		#if Circle
		if(hitType & HOT.Circle):
			#print("Circle")
			osuData.numCircles += 1
			result = (split[0], split[1], combo);#x,y,combo
			x = Circle(split[0], split[1], split[2])
			if (len(split) > 5):#Circle
				readCustomBanks(split[5], bankInfo)
		#if Slider	
		elif((hitType & HOT.Slider) > 0):
			#print("slider")
			osuData.numSliders += 1
			curveType = CurveTypes.Catmull
			curveLength = 0.0
			points =[(split[0], split[1])]
			pointsplit = split[5].split('|')
			for t in pointsplit:
				if(len(t) == 1):
					curveType = getCurveType(t)
					continue
					
				temp = t.split(':')
				points.insert(int(float(temp[0])),int(float(temp[0])))
			
			repeatCount = int(split[6])
			if (repeatCount > 9000):
				raise ValueError('Repeat count is way too high')

			if (len(split) > 7):
				length = float(split[7])
			
			if (len(split) > 10):
				readCustomBanks(split[10], bankInfo)
				
			x = Slider(split[0], curveType, points, repeatCount, length)
			#NEXT SECTION IS NOT NEEDED BUT ALREADY PORTED: !!!!!!!!!!!!!!!!!!!!!!!!!!!!@@!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

			#One node for each repeat + the start and end nodes
            #Note that the first length of the slider is considered a repeat, but there are no actual repeats happening
			nodes = max(0, repeatCount - 1) + 2

            #Populate node sample bank infos with the default hit object sample bank
			nodeBankInfos = []#sample bank info
			for i in range(nodes):
				nodeBankInfos.append(bankInfo.clone())

            #Read any per-node sample banks
			if (len(split) > 9 and len(split[9]) > 0):
				sets = split[9].split('|')
				for i in range(nodes):
					if (i >= len(sets)):
						break
					info = nodeBankInfos[i]
					readCustomBanks(sets[i], info)
					
			# Populate node sound types with the default hit object sound type
			nodeSoundTypes = []#legacySoundTypes
			for i in range(nodes):
				nodeSoundTypes.append(soundType);
			
			# Read any per-node sound types
			if(len(split) > 8 and len(split[8]) > 0):
				adds = split[8].split('|')
				for i in range(nodes):
					if (i >= len(adds)):
						break
					sound = int(float(adds[i]))
					nodeSoundTypes[i] = sound
					
			#Not needed but I might port all of this later:			
			"""
			#Generate the final per-node samples
			nodeSamples = [nodes]
			for i in range(repeatCount):
				nodeSamples.insert(convertSoundType(nodeSoundTypes[i], nodeBankInfos[i]))
			"""
			
			result = ((int(split[0]), int(split[1])), combo, points, length, curveType, repeatCount)#, nodeSamples have been taken out because they are not needed right now 
	 		
			#MOVING ON TO NEEDED MATERIAL AGAIN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		#if Spinner
		elif((hitType & HOT.Spinner) > 0):
			#print("spinner")
			osuData.numSpinners += 1
			result = ((512/2, 384/2), float(split[5]))#position end time
			x = Spinner(512/2, 384/2, float(split[2]), float(split[5]))
			if (len(split) > 6):
				readCustomBanks(split[6], bankInfo)
				
		elif((hitType & HOT.Hold) > 0):
			#Note: Hold is generated by BMS converts
			endTime = float(split[2])
			if (len(split) > 5 and len(split[5]) > 0):
				ss = split[5].split(':')
				endTime = float(ss[0])
				print(":".join(ss[1:]))
				readCustomBanks(":".join(ss[1:]), bankInfo)#This might be a problem!@!@!@! ERROR
	
			result = ((int(split[0]), int(split[1])), combo, endTime)
		
		if (result == None):
			raise ValueError('Unknown hit object type.')
		
		timedResult = (float(split[2]), result)
		#result.Samples = convertSoundType(soundType, bankInfo)
		return timedResult



















#end